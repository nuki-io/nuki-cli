package blecommands_test

import (
	"testing"

	"github.com/stretchr/testify/require"
	"go.nuki.io/nuki/nukictl/pkg/blecommands"
)

func TestRequestPublicKeyToMessage(t *testing.T) {
	handler := blecommands.NewBleHandler(nil, nil)
	cmd := &blecommands.RequestData{CommandIdentifier: blecommands.CommandPublicKey}
	got := handler.ToMessage(cmd)
	want := []byte{0x01, 0x00, 0x03, 0x00, 0x27, 0xA7}
	require.Equal(t, want, got)
}

func TestEncryptedRequestChallenge(t *testing.T) {
	authId := []byte{0x02, 0x00, 0x00, 0x00}
	crypto := blecommands.NewCrypto([]byte{0x21, 0x7F, 0xCB, 0x0F, 0x18, 0xCA, 0xF2, 0x84, 0xE9, 0xBD, 0xEA, 0x0B, 0x94, 0xB8, 0x3B, 0x8D, 0x10, 0x86, 0x7E, 0xD7, 0x06, 0xBF, 0xDE, 0xDB, 0xD2, 0x38, 0x1F, 0x4C, 0xB3, 0xB8, 0xF7, 0x30})
	handler := blecommands.NewBleHandler(crypto, authId)
	cmd := &blecommands.RequestData{CommandIdentifier: blecommands.CommandChallenge}
	nonce := []byte{0x88, 0xFD, 0xEF, 0xD7, 0xF9, 0x41, 0xB6, 0x3C, 0x24, 0x2B, 0x7F, 0x84, 0xB3, 0xD7, 0x86, 0x88, 0x63, 0x40, 0xA4, 0xA8, 0xB1, 0xC1, 0xEA, 0xA0}
	msg := handler.ToEncryptedMessage(cmd, nonce)

	want := []byte{
		// nonce 24 bytes
		0x88, 0xFD, 0xEF, 0xD7, 0xF9, 0x41, 0xB6, 0x3C,
		0x24, 0x2B, 0x7F, 0x84, 0xB3, 0xD7, 0x86, 0x88,
		0x63, 0x40, 0xA4, 0xA8, 0xB1, 0xC1, 0xEA, 0xA0,
		// auth id 4 bytes
		0x02, 0x00, 0x00, 0x00,
		// msg length 2 bytes
		0x1A, 0x00,
		// PDATA
		0x06, 0x68, 0x19, 0xA2, 0x95, 0x6E, 0x6A, 0x79,
		0xAF, 0x6E, 0xD6, 0x6D, 0x25, 0x7B, 0x27, 0x67,
		0x15, 0xF5, 0x1F, 0x63, 0xA8, 0xBE, 0xB9, 0xED,
		0x0D, 0x47,
	}
	require.Equal(t, want, msg)
}

func TestResponseDecryption(t *testing.T) {
	t.Skip("Skipping, as the test input seems to be shorter than what is defined as mandatory in the spec")
	crypto := blecommands.NewCrypto([]byte{0x21, 0x7F, 0xCB, 0x0F, 0x18, 0xCA, 0xF2, 0x84, 0xE9, 0xBD, 0xEA, 0x0B, 0x94, 0xB8, 0x3B, 0x8D, 0x10, 0x86, 0x7E, 0xD7, 0x06, 0xBF, 0xDE, 0xDB, 0xD2, 0x38, 0x1F, 0x4C, 0xB3, 0xB8, 0xF7, 0x30})
	enc := []byte{
		0x90, 0xB0, 0x75, 0x7C, 0xFE, 0xD0, 0x24, 0x30, 0x17, 0xEA, 0xF5, 0xE0, 0x89, 0xF8, 0x58, 0x3B, 0x98, 0x39, 0xD6, 0x1B, 0x05, 0x09, 0x24, 0xD2, 0x02, 0x00, 0x00, 0x00, 0x27, 0x00, 0xB1, 0x39, 0x38, 0xB6, 0x71, 0x21, 0xB6, 0xD5, 0x28, 0xE7, 0xDE, 0x20, 0x6B, 0x0D, 0x7C, 0x5A, 0x94, 0x58, 0x7A, 0x47, 0x1B, 0x33, 0xEB, 0xFB, 0x01, 0x2C, 0xED, 0x8F, 0x12, 0x61, 0x13, 0x55, 0x66, 0xED, 0x75, 0x6E, 0x39, 0x10, 0xB5,
	}
	h := blecommands.NewBleHandler(crypto, []byte{0x02, 0x00, 0x00, 0x00})
	res, err := h.FromEncryptedDeviceResponse(enc)
	if err != nil {
		t.Fatalf("failed to decrypt response: %v", err)
	}
	require.Equal(t, []byte{0x02, 0x01, 0x00, 0xe0, 0x07, 0x03, 0x07, 0x08, 0x0f, 0x1e, 0x3c, 0x00, 0x00, 0x20, 0x0a}, res.GetPayload())
}
