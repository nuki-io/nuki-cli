package bleflows_test

import (
	"slices"
	"testing"

	"github.com/nuki-io/nuki-cli/pkg/bleflows"
	"github.com/stretchr/testify/require"
)

var (
	slPubKey   = []byte{0xDC, 0x04, 0x0A, 0xFE, 0x64, 0x01, 0x55, 0x0E, 0x1F, 0x7B, 0x20, 0xAB, 0x50, 0x13, 0x5B, 0x80, 0x76, 0x58, 0x34, 0xB9, 0xD8, 0x98, 0xE6, 0xDA, 0x71, 0x29, 0xF6, 0x1C, 0x62, 0x92, 0x9B, 0x78}
	cliPubKey  = []byte{0xF7, 0xA4, 0xFE, 0x97, 0x83, 0xC4, 0xC9, 0x36, 0xA7, 0x77, 0x96, 0x3E, 0x78, 0xBB, 0x48, 0x15, 0x33, 0x20, 0x8D, 0x4E, 0x7D, 0x83, 0x73, 0x73, 0xBA, 0x4B, 0x94, 0x57, 0x47, 0xD9, 0xBA, 0x46}
	cliPrivKey = []byte{0xC1, 0x1C, 0xFB, 0x40, 0x0A, 0x3A, 0x33, 0x41, 0x4E, 0x89, 0xF9, 0xE6, 0x60, 0x72, 0x71, 0xC2, 0xAF, 0x07, 0x64, 0x05, 0xC5, 0x40, 0x79, 0x84, 0x29, 0x7F, 0x1D, 0xE0, 0xE7, 0xA5, 0x4B, 0x73}
)

func TestAuthorizeContextSharedKey(t *testing.T) {
	ac := &bleflows.AuthorizeContext{
		CliPrivateKey: cliPrivKey,
		SlPublicKey:   slPubKey,
	}
	ac.CalculateSharedKey()

	require.Equal(t, []byte{0x91, 0x55, 0x61, 0x58, 0x7D, 0x86, 0x81, 0x5B, 0x70, 0x9E, 0xDD, 0x58, 0x19, 0xD8, 0xC6, 0xF2, 0xE8, 0x83, 0xDA, 0x3C, 0x86, 0xF4, 0x61, 0xF1, 0x3B, 0x84, 0x22, 0x8B, 0x84, 0x53, 0x3E, 0x04}, ac.SharedKey)
}

func TestAuthorizeContextAuthenticator(t *testing.T) {
	ac := &bleflows.AuthorizeContext{
		CliPrivateKey: cliPrivKey,
		CliPublicKey:  cliPubKey,
		SlPublicKey:   slPubKey,
	}
	ac.CalculateSharedKey()

	challenge := []byte{0xCC, 0x5F, 0x15, 0x19, 0x01, 0x27, 0xA3, 0xB2, 0x7D, 0x87, 0x16, 0x0A, 0xE5, 0x0D, 0x45, 0x9B, 0x15, 0x30, 0xA5, 0x0D, 0xD9, 0x3E, 0x9D, 0x0C, 0x3D, 0xB0, 0x5A, 0x6C, 0xFA, 0xA5, 0xD6, 0x4A}
	authenticator := ac.GetMessageAuthenticator(ac.CliPublicKey, ac.SlPublicKey, challenge)

	require.Equal(t, []byte{0x8D, 0x81, 0x63, 0xEF, 0x2E, 0x9F, 0x84, 0xBA, 0xDE, 0x6B, 0xC3, 0xA5, 0xA5, 0xBA, 0xF6, 0x13, 0xF8, 0xBF, 0x70, 0xF2, 0x2C, 0x4D, 0xD7, 0xC5, 0x14, 0xB8, 0xEC, 0xE9, 0x32, 0x30, 0x5F, 0xDB}, authenticator)
}

func TestAuthorizeContextAuthorizeData(t *testing.T) {
	appName := [32]byte{}
	copy(appName[:], "Testapp")

	payload := slices.Concat(
		[]byte{0x00},                   // App,
		[]byte{0x27, 0xED, 0x7E, 0x18}, // From the example. should be random for each app
		appName[:],
		[]byte{0xA7, 0x2A, 0xE5, 0xBB, 0x47, 0x26, 0xC6, 0x0F, 0xBB, 0x1A, 0xA2, 0x82, 0x97, 0x08, 0x1D, 0xCE, 0x45, 0xF7, 0x67, 0x31, 0x71, 0x1E, 0x39, 0xAC, 0x2B, 0x5F, 0xF9, 0xAC, 0xBD, 0xF0, 0x38, 0x44},
	)
	challenge := []byte{0x70, 0xAC, 0xC4, 0x7F, 0xBC, 0xC5, 0x1C, 0x01, 0x37, 0x82, 0x71, 0x56, 0x51, 0x45, 0xC2, 0x69, 0x00, 0x5C, 0xF7, 0x2C, 0xCD, 0x33, 0x76, 0x81, 0x26, 0xB4, 0x2D, 0x0D, 0xC5, 0xF9, 0x42, 0xE6}

	ac := &bleflows.AuthorizeContext{
		CliPrivateKey: cliPrivKey,
		SlPublicKey:   slPubKey,
	}
	ac.CalculateSharedKey()

	authenticator := ac.GetMessageAuthenticator(payload, challenge)

	require.Equal(t, []byte{0x89, 0x27, 0xB9, 0xAC, 0x41, 0x6A, 0x5B, 0x1E, 0x36, 0x7B, 0x58, 0xBC, 0x8D, 0x59, 0xC3, 0x9E, 0x7F, 0xC8, 0xD0, 0xFD, 0x6D, 0xCC, 0x8F, 0x05, 0x86, 0x3D, 0x34, 0x51, 0x8C, 0xBA, 0xA2, 0x21}, authenticator)
}
